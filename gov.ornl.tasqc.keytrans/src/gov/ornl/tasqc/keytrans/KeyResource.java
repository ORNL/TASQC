/**----------------------------------------------------------------------------
Copyright (c) 2015-, UT-Battelle LLC
All rights reserved.

Authors: Jay Jay Billings, Phil Evans, Alex McCaskey
Author Contact: Phil Evans, evanspg@ornl.gov

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice, this
  list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright notice,
  this list of conditions and the following disclaimer in the documentation
  and/or other materials provided with the distribution.

* Neither the name of fire nor the names of its
  contributors may be used to endorse or promote products derived from
  this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-----------------------------------------------------------------------------*/
package gov.ornl.tasqc.keytrans;

import javax.inject.Singleton;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.ext.ContextResolver;
import javax.ws.rs.ext.Providers;

/**
 * This class is responsible for serving keys and is available at the /keys
 * path. This class is a singleton because all keys should be requested in
 * sequence by approved clients.
 * 
 * Future enhancements:
 * 
 * use keys to uniquely identify clients include detailed
 * 
 * information in requests
 * 
 * @author Jay Jay Billings
 */
@Path("keys")
@Singleton
public class KeyResource {

	/**
	 * The full set of context providers available to the resource. Used to
	 * retrieve the quantum key resolver.
	 */
	@Context
	protected Providers providers;

	/**
	 * This operation returns the next available key generated by the engine if
	 * the client is able to correctly authenticate itself.
	 *
	 * @param authenticationKey
	 *            the authentication key provided by the client to prove that it
	 *            is a valid quantum key client.
	 * @return The key if and only if the authenticationKey is valid.
	 */
	@GET
	@Produces(MediaType.TEXT_PLAIN)
	public String getNextKey(final @QueryParam("authKey") String authKey) {

		// Default to a failure message.
		String msg = "Failure";
		// Get the content resolver for the quantum keys
		ContextResolver<QuantumKeyContext> quantumKeyResolver = providers
				.getContextResolver(QuantumKeyContext.class,
						MediaType.TEXT_PLAIN_TYPE);

		// If the user logs in with a valid authentication key, return a new
		// quantum key.
		if (authKey != null) {
			try {
				// Grab the latest key
				msg = quantumKeyResolver.getContext(KeyResource.class)
						.getNextKey();
			} catch (InterruptedException e) {
				// Complain
				// FIXME! Send to a log
				e.printStackTrace();
			}
		}

		return msg;
	}
}
